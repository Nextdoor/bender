{
  "$schema" : "http://json-schema.org/draft-04/schema#",
  "title" : "Bender Config",
  "type" : "object",
  "additionalProperties" : false,
  "properties" : {
    "transport" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/FileTransportConfig"
      }, {
        "$ref" : "#/definitions/S3TransportConfig"
      }, {
        "$ref" : "#/definitions/ElasticSearchTransportConfig"
      }, {
        "$ref" : "#/definitions/DummyTransporterConfig"
      }, {
        "$ref" : "#/definitions/FirehoseTransportConfig"
      } ],
      "description" : "Transport configuration"
    },
    "wrapper" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/KinesisWrapperConfig"
      }, {
        "$ref" : "#/definitions/PassthroughWrapperConfig"
      }, {
        "$ref" : "#/definitions/DummyWrapperConifg"
      }, {
        "$ref" : "#/definitions/BasicWrapperConfig"
      }, {
        "$ref" : "#/definitions/S3WrapperConfig"
      } ],
      "description" : "Wrapper configuration"
    },
    "serializer" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/JsonSerializerConfig"
      }, {
        "$ref" : "#/definitions/DummySerializerConfig"
      } ],
      "description" : "Serializer configuration"
    },
    "reporters" : {
      "type" : "array",
      "items" : {
        "oneOf" : [ {
          "$ref" : "#/definitions/CloudwatchReporterConfig"
        }, {
          "$ref" : "#/definitions/DataDogReporterConfig"
        }, {
          "$ref" : "#/definitions/DummyReporterConifg"
        } ]
      },
      "description" : "List of reporter configurations"
    },
    "sources" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/SourceConfig"
      },
      "description" : "Source configurations. This includes deserializer and mutator."
    },
    "handler" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/DummyHandlerConfig"
      }, {
        "$ref" : "#/definitions/S3HandlerConfig"
      }, {
        "$ref" : "#/definitions/SNSS3HandlerConfig"
      }, {
        "$ref" : "#/definitions/KinesisHandlerConfig"
      } ],
      "description" : "Handler configuration"
    }
  },
  "definitions" : {
    "FileTransportConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "File" ],
          "default" : "File"
        },
        "threads" : {
          "type" : "integer",
          "default" : 5,
          "description" : "Number of concurrent transporters allowed"
        },
        "filename" : {
          "type" : "string",
          "description" : "Local filesystem file to write data to"
        }
      },
      "title" : "File",
      "required" : [ "config_name", "filename" ]
    },
    "S3TransportConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "S3" ],
          "default" : "S3"
        },
        "threads" : {
          "type" : "integer",
          "default" : 5,
          "description" : "Number of concurrent transporters allowed"
        },
        "bucket_name" : {
          "type" : "string",
          "description" : "S3 bucket name"
        },
        "base_path" : {
          "type" : "string",
          "description" : "Path to append to S3 keys"
        },
        "use_compression" : {
          "type" : "boolean",
          "default" : true,
          "description" : "Compress files with bz2 compression"
        },
        "compress_buffer" : {
          "type" : "boolean",
          "default" : false,
          "description" : "When using compression optionally compress buffered data as it is serialized. This is optimal for no or low cardinality partitioning. When writing high cardinality data this may result in OOMs due to high overhead of having a compressor for each partition."
        },
        "max_buffer_size" : {
          "type" : "integer",
          "minimum" : 5242880,
          "default" : 6291456,
          "description" : "Amount of serialized data to hold in memory before forcing a write to S3. It is important to note that this value is per partition and having too many or too large buffers will lead to OOMs. Also, S3 requires multi-part files have parts of more than 5mb. When using compression and NOT compressing buffers you must take compression ratio into account. Meaning that when compressed the contents of your buffer must be more than 5mb or the put to S3 will fail. Set this value accordingly high to account for compression."
        }
      },
      "title" : "S3",
      "required" : [ "config_name", "bucket_name" ]
    },
    "ElasticSearchTransportConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "ElasticSearch" ],
          "default" : "ElasticSearch"
        },
        "threads" : {
          "type" : "integer",
          "default" : 5,
          "description" : "Number of concurrent transporters allowed"
        },
        "username" : {
          "type" : "string",
          "default" : "false",
          "description" : "HTTP auth username"
        },
        "password" : {
          "type" : "string",
          "default" : "false",
          "description" : "HTTP auth password"
        },
        "hostname" : {
          "type" : "string",
          "description" : "ElasticSearch HTTP endpoint hostname"
        },
        "port" : {
          "type" : "integer",
          "minimum" : 1,
          "maximum" : 65535,
          "default" : 9200,
          "description" : "ElasticSearch HTTP endpoint port"
        },
        "use_ssl" : {
          "type" : "boolean",
          "default" : false,
          "description" : "Use SSL connections (certificates are not validated)"
        },
        "use_gzip" : {
          "type" : "boolean",
          "default" : false,
          "description" : "Use GZIP compression on HTTP calls"
        },
        "index" : {
          "type" : "string",
          "description" : "Index to write to"
        },
        "type" : {
          "type" : "string",
          "description" : "ElasticSearch document type"
        },
        "batch_size" : {
          "type" : "integer",
          "minimum" : 500,
          "maximum" : 100000,
          "default" : 500,
          "description" : "Maximum number of documents in  bulk api call"
        },
        "index_time_format" : {
          "type" : "string",
          "description" : "Java time format to append to index name"
        },
        "timeout" : {
          "type" : "integer",
          "minimum" : 1000,
          "maximum" : 300000,
          "default" : 40000,
          "description" : "Socket timeout on HTTP connection"
        },
        "retry_count" : {
          "type" : "integer",
          "minimum" : 0,
          "maximum" : 10,
          "default" : 0,
          "description" : "Number of retries to make when a put failure occurs"
        },
        "retry_delay" : {
          "type" : "integer",
          "minimum" : 1,
          "maximum" : 60000,
          "default" : 1000,
          "description" : "Initial delay between retries. If more than one retries specified exponential backoff is used."
        },
        "use_hashid" : {
          "type" : "boolean",
          "default" : false,
          "description" : "Use hash id generated by bender as document id"
        }
      },
      "title" : "ElasticSearch",
      "required" : [ "config_name", "hostname", "index", "type" ]
    },
    "DummyTransporterConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyTransportHelper$DummyTransporterConfig" ],
          "default" : "DummyTransportHelper$DummyTransporterConfig"
        },
        "threads" : {
          "type" : "integer",
          "default" : 5,
          "description" : "Number of concurrent transporters allowed"
        }
      },
      "title" : "DummyTransportHelper$DummyTransporterConfig",
      "required" : [ "config_name" ]
    },
    "FirehoseTransportConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "Firehose" ],
          "default" : "Firehose"
        },
        "threads" : {
          "type" : "integer",
          "default" : 5,
          "description" : "Number of concurrent transporters allowed"
        },
        "stream_name" : {
          "type" : "string",
          "description" : "Firehose stream name to publish to"
        }
      },
      "title" : "Firehose",
      "required" : [ "config_name", "stream_name" ]
    },
    "KinesisWrapperConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "KinesisWrapper" ],
          "default" : "KinesisWrapper"
        }
      },
      "title" : "KinesisWrapper",
      "required" : [ "config_name" ]
    },
    "PassthroughWrapperConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "PassthroughWrapper" ],
          "default" : "PassthroughWrapper"
        }
      },
      "title" : "PassthroughWrapper",
      "required" : [ "config_name" ]
    },
    "DummyWrapperConifg" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyWrapperHelper$DummyWrapperConfig" ],
          "default" : "DummyWrapperHelper$DummyWrapperConfig"
        }
      },
      "title" : "DummyWrapperHelper$DummyWrapperConfig",
      "required" : [ "config_name" ]
    },
    "BasicWrapperConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "BasicWrapper" ],
          "default" : "BasicWrapper"
        }
      },
      "title" : "BasicWrapper",
      "required" : [ "config_name" ]
    },
    "S3WrapperConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "S3Wrapper" ],
          "default" : "S3Wrapper"
        }
      },
      "title" : "S3Wrapper",
      "required" : [ "config_name" ]
    },
    "JsonSerializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "Json" ],
          "default" : "Json"
        },
        "field_naming_policy" : {
          "type" : "string",
          "default" : "LOWER_CASE_WITH_UNDERSCORES",
          "enum" : [ "IDENTITY", "UPPER_CAMEL_CASE", "UPPER_CAMEL_CASE_WITH_SPACES", "LOWER_CASE_WITH_UNDERSCORES", "LOWER_CASE_WITH_DASHES" ],
          "description" : "GSON field naming policy"
        }
      },
      "title" : "Json",
      "required" : [ "config_name" ]
    },
    "DummySerializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummySerializerHelper$DummySerializerConfig" ],
          "default" : "DummySerializerHelper$DummySerializerConfig"
        }
      },
      "title" : "DummySerializerHelper$DummySerializerConfig",
      "required" : [ "config_name" ]
    },
    "CloudwatchReporterConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "Cloudwatch" ],
          "default" : "Cloudwatch"
        },
        "stat_filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatFilter"
          },
          "description" : "List of filter to apply to stats. If a stat matches the filter it is excluded when being published."
        },
        "namespace" : {
          "type" : "string",
          "default" : "Nextdoor/bender",
          "description" : "Cloudwatch namespace to write metrics under"
        }
      },
      "title" : "Cloudwatch",
      "required" : [ "config_name" ]
    },
    "StatFilter" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the Stat to match against"
        },
        "report_zeros" : {
          "type" : "boolean",
          "default" : true,
          "description" : "Report zero-valued stats"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Tag"
          },
          "description" : "Map of tag names and values to match"
        }
      },
      "required" : [ "name" ]
    },
    "Tag" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      },
      "required" : [ "key", "value" ]
    },
    "DataDogReporterConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DataDog" ],
          "default" : "DataDog"
        },
        "stat_filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatFilter"
          },
          "description" : "List of filter to apply to stats. If a stat matches the filter it is excluded when being published."
        },
        "prefix" : {
          "type" : "string",
          "default" : "lambda.bender",
          "description" : "Prefix to append to metric names"
        }
      },
      "title" : "DataDog",
      "required" : [ "config_name" ]
    },
    "DummyReporterConifg" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyReporter$DummyReporterConfig" ],
          "default" : "DummyReporter$DummyReporterConfig"
        },
        "stat_filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatFilter"
          },
          "description" : "List of filter to apply to stats. If a stat matches the filter it is excluded when being published."
        }
      },
      "title" : "DummyReporter$DummyReporterConfig",
      "required" : [ "config_name" ]
    },
    "SourceConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Source name"
        },
        "source_regex" : {
          "type" : "string",
          "default" : ".*",
          "description" : "Pattern to match source trigger against"
        },
        "regex_patterns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Regex patterns to filter events by prior to deserialization"
        },
        "contains_strings" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Filter events containing these Strings prior to deserialization"
        },
        "deserializer" : {
          "oneOf" : [ {
            "$ref" : "#/definitions/DummyDeserializerConfig"
          }, {
            "$ref" : "#/definitions/RegexDeserializerConfig"
          }, {
            "$ref" : "#/definitions/TimeSeriesJsonDeserializerConfig"
          }, {
            "$ref" : "#/definitions/GenericJsonDeserializerConfig"
          } ],
          "description" : "Deserializer configuration"
        },
        "mutators" : {
          "type" : "array",
          "items" : {
            "oneOf" : [ {
              "$ref" : "#/definitions/DummyMutatorConfig"
            }, {
              "$ref" : "#/definitions/DropArraysMutatorConfig"
            }, {
              "$ref" : "#/definitions/JsonRootNodeMutatorConfig"
            }, {
              "$ref" : "#/definitions/KeyNameMutatorConfig"
            } ]
          },
          "description" : "Mutators configuration"
        }
      },
      "required" : [ "name" ]
    },
    "DummyDeserializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyDeserializerHelper$DummyDeserializerConfig" ],
          "default" : "DummyDeserializerHelper$DummyDeserializerConfig"
        },
        "partition_specs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PartitionSpec"
          },
          "description" : "Configuration to specify object fields that are treated as partitions"
        }
      },
      "title" : "DummyDeserializerHelper$DummyDeserializerConfig",
      "required" : [ "config_name" ]
    },
    "PartitionSpec" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Value to use as the key for the partition"
        },
        "sources" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Fields to use for the value of the partition"
        },
        "interpreter" : {
          "type" : "string",
          "default" : "STRING",
          "enum" : [ "STRING", "MILLISECONDS", "SECONDS", "STATIC" ],
          "description" : "Interpreter to use on the partition value"
        },
        "format" : {
          "type" : "string",
          "description" : "Java date format to use when using a time based interpreter"
        },
        "string_format" : {
          "type" : "string",
          "default" : "NONE",
          "enum" : [ "TOLOWER", "TOUPPER", "NONE" ],
          "description" : "Basic string formatting"
        }
      },
      "required" : [ "name", "interpreter" ]
    },
    "RegexDeserializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "Regex" ],
          "default" : "Regex"
        },
        "fields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ReFieldConfig"
          },
          "description" : "List of field names and their types"
        },
        "regex" : {
          "type" : "string",
          "description" : "Java regex. See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html"
        },
        "use_re2j" : {
          "type" : "boolean",
          "default" : false,
          "description" : "Use the faster but less flexible regex library. See https://github.com/google/re2j"
        },
        "partition_specs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PartitionSpec"
          },
          "description" : "Configuration to specify object fields that are treated as partitions"
        }
      },
      "title" : "Regex",
      "required" : [ "config_name", "fields", "regex" ]
    },
    "ReFieldConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name to give to field"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "STRING", "NUMBER", "BOOLEAN" ],
          "description" : "Data type of field"
        }
      },
      "required" : [ "name", "type" ]
    },
    "TimeSeriesJsonDeserializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "TimeSeriesJson" ],
          "default" : "TimeSeriesJson"
        },
        "nested_field_configs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FieldConfig"
          },
          "description" : "Configurations for nested fields in JSON"
        },
        "root_node_override_path" : {
          "type" : "string",
          "description" : "Path to a JSON node which is promoted to root node. See https://github.com/jayway/JsonPath"
        },
        "time_field" : {
          "type" : "string",
          "description" : "Path to a JSON node which is used as a timestamp. See https://github.com/jayway/JsonPath"
        },
        "time_field_type" : {
          "type" : "string",
          "enum" : [ "SECONDS", "MILLISECONDS" ],
          "description" : "How to interpret time field"
        },
        "partition_specs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PartitionSpec"
          },
          "description" : "Configuration to specify object fields that are treated as partitions"
        }
      },
      "title" : "TimeSeriesJson",
      "required" : [ "config_name", "time_field", "time_field_type" ]
    },
    "FieldConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "field" : {
          "type" : "string",
          "description" : "String field which contains a JSON object"
        },
        "prefix_field" : {
          "type" : "string",
          "description" : "Field to put any data which preceeded JSON object"
        }
      },
      "required" : [ "field" ]
    },
    "GenericJsonDeserializerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "GenericJson" ],
          "default" : "GenericJson"
        },
        "nested_field_configs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FieldConfig"
          },
          "description" : "Configurations for nested fields in JSON"
        },
        "root_node_override_path" : {
          "type" : "string",
          "description" : "Path to a JSON node which is promoted to root node. See https://github.com/jayway/JsonPath"
        },
        "partition_specs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PartitionSpec"
          },
          "description" : "Configuration to specify object fields that are treated as partitions"
        }
      },
      "title" : "GenericJson",
      "required" : [ "config_name" ]
    },
    "DummyMutatorConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyMutatorHelper$DummyMutatorConfig" ],
          "default" : "DummyMutatorHelper$DummyMutatorConfig"
        }
      },
      "title" : "DummyMutatorHelper$DummyMutatorConfig",
      "required" : [ "config_name" ]
    },
    "DropArraysMutatorConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DropArraysMutator" ],
          "default" : "DropArraysMutator"
        }
      },
      "title" : "DropArraysMutator",
      "required" : [ "config_name" ]
    },
    "JsonRootNodeMutatorConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "JsonRootNodeMutator" ],
          "default" : "JsonRootNodeMutator"
        },
        "root_path" : {
          "type" : "string",
          "description" : "Path to a JSON node which is promoted to root node. See https://github.com/jayway/JsonPath"
        }
      },
      "title" : "JsonRootNodeMutator",
      "required" : [ "config_name", "root_path" ]
    },
    "KeyNameMutatorConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "KeyNameMutator" ],
          "default" : "KeyNameMutator"
        }
      },
      "title" : "KeyNameMutator",
      "required" : [ "config_name" ]
    },
    "DummyHandlerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "DummyHandlerHelper$DummyHandler" ],
          "default" : "DummyHandlerHelper$DummyHandler"
        },
        "fail_on_exception" : {
          "type" : "boolean",
          "default" : true,
          "description" : "If an uncaught exception occurs fail the function"
        }
      },
      "title" : "DummyHandlerHelper$DummyHandler",
      "required" : [ "config_name" ]
    },
    "S3HandlerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "S3Handler" ],
          "default" : "S3Handler"
        },
        "fail_on_exception" : {
          "type" : "boolean",
          "default" : true,
          "description" : "If an uncaught exception occurs fail the function"
        },
        "sns_notification_arn" : {
          "type" : "string",
          "description" : "SNS Topic to publish function falures to"
        }
      },
      "title" : "S3Handler",
      "required" : [ "config_name" ]
    },
    "SNSS3HandlerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "SNSS3Handler" ],
          "default" : "SNSS3Handler"
        },
        "fail_on_exception" : {
          "type" : "boolean",
          "default" : true,
          "description" : "If an uncaught exception occurs fail the function"
        },
        "sns_notification_arn" : {
          "type" : "string",
          "description" : "SNS Topic to publish function falures to"
        }
      },
      "title" : "SNSS3Handler",
      "required" : [ "config_name" ]
    },
    "KinesisHandlerConfig" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "config_name" : {
          "type" : "string",
          "enum" : [ "KinesisHandler" ],
          "default" : "KinesisHandler"
        },
        "fail_on_exception" : {
          "type" : "boolean",
          "default" : true,
          "description" : "If an uncaught exception occurs fail the function"
        }
      },
      "title" : "KinesisHandler",
      "required" : [ "config_name" ]
    }
  }
}