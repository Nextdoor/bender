/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * Copyright 2017 Nextdoor.com, Inc
 *
 */

package com.nextdoor.bender.utils;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import com.nextdoor.bender.config.Source;

/**
 * Provides a basic cache for looking up {@link Source} from a provided String. If the
 * {@link Source} is not found then the sources are iterated and a regex match is performed.
 */
public class SourceUtils {
  public static Map<String, Source> sourceMap = new HashMap<String, Source>();

  public static class SourceNotFoundException extends RuntimeException {
    /**
     * Generated by eclipse
     */
    private static final long serialVersionUID = -2117203990438659874L;

    public SourceNotFoundException(String location) {
      super("Source not found for " + location);
    }
  }

  public static Source getSource(String sourceLocation, Collection<Source> sources,
      boolean useCache) {
    Source source;

    if (useCache && (source = sourceMap.get(sourceLocation)) != null) {
      return source;
    }

    for (Source s : sources) {
      if (s.getSourceRegex().matcher(sourceLocation).matches()) {
        if (useCache) {
          sourceMap.put(sourceLocation, s);
        }
        return s;
      }
    }

    throw new SourceNotFoundException(sourceLocation);
  }

  public static Source getSource(String sourceLocation, Collection<Source> sources) {
    return getSource(sourceLocation, sources, true);
  }
}
